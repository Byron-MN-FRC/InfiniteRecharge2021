// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
    import edu.wpi.first.wpilibj.DigitalInput;
    import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
    import edu.wpi.first.wpilibj2.command.SubsystemBase;
    import frc.robot.RobotContainer;
    import frc.robot.commands.indexOneBall; 

/**
 *
 */
public class BallIndexer extends SubsystemBase {
    private int indexedBallCount = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX beltMotor;
private DigitalInput indexSensor;
private DigitalInput indexToShootSensor;
private DigitalInput indexAcquiredSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean indexerRunning = false;
    
    /**
    *
    */
    public BallIndexer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
beltMotor = new WPI_TalonSRX(11);
 
 

indexSensor = new DigitalInput(1);
 addChild("indexSensor",indexSensor);
 

indexToShootSensor = new DigitalInput(2);
 addChild("indexToShootSensor",indexToShootSensor);
 

indexAcquiredSensor = new DigitalInput(3);
 addChild("indexAcquiredSensor",indexAcquiredSensor);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    
    ballPresentAtExit = ballPresent(2); // moveed from initDefaultCommand
    ballPresentAtExitPrevious = ballPresentAtExit;

    }
    /*@Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        ballPresentAtExit = ballPresent(2);
        ballPresentAtExitPrevious = ballPresentAtExit;

        
    } Need to figure out how to do it diffretly*/
    boolean ballPresentAtExitPrevious = false;
    boolean ballArrived = false;
    boolean ballPresentAtExit;

    public boolean shooterActive = false;

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        if (ballPresent(0) && !indexerRunning && !shooterActive)  {
            indexOneBall idxCmd = new indexOneBall(RobotContainer.getInstance().getm_ballIndexer());
            indexerRunning = true;
            idxCmd.schedule();
        }
         // The following code watches for balls appearing and leaving,
        // causing the ball count to be decremented.
        ballPresentAtExit = ballPresent(2);

        if (!ballArrived){
            // Test to see if ball has arrived.
            if (ballPresentAtExit && !ballPresentAtExitPrevious){
                ballArrived = true;
            }
        } else {
            // Test to see if the ball has left
            if (!ballPresentAtExit && ballPresentAtExitPrevious){
                ballArrived = false;
                decrementBallCount();
            }
        }

        ballPresentAtExitPrevious = ballPresentAtExit;
        SmartDashboard.putNumber("drive/Indexed Powercell Count", ballCount());
    }




    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public boolean ballPresent(int aPort) {
        boolean retValue = false;
        switch (aPort) {
        case 0:
            retValue = !indexAcquiredSensor.get();
            break;
        case 1:
            retValue = !indexSensor.get();
            break;
        case 2:
            retValue = !indexToShootSensor.get();
            break;
        default:
            retValue = false;
            break;
        }
        return retValue;
    }

    public void startIndexMotor(double speed) {
        beltMotor.set(speed);
    }

    public void stopIndexMotor() {
        beltMotor.set(0);
        indexerRunning = false;
    }

    public WPI_TalonSRX getBeltMotor() {
        return beltMotor;
    }

    public int incrementPwrCellCount() {
        return ++indexedBallCount;
    }

    public int decrementBallCount() {
        return --indexedBallCount;
    }

    public int ballCount() {
        return indexedBallCount;
    }

    public void resetCount() {
        indexedBallCount = 0;
    }

    public void reinitializeIndexer() {
        indexerRunning = false;
    }


    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

